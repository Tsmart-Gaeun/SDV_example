///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : lit.h
/// SOFTWARE COMPONENT NAME           : LIT
/// GENERATED DATE                    : 2025-08-22 08:19:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_LIT_AA_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_LIT_AA_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <csignal>
#include <thread>
#include <ara/log/logger.h>
#include <condition_variable>
#include <mutex>

#include "eevp/control/soaroa_proxy.h"
#include "eevp/subscription/service/subscriptionmanagement_proxy.h"

#include "lit/aa/port/rportsoadms.h"
#include "lit/aa/port/rportsoasmartfilm.h"
#include "lit/aa/port/rportsubscriptionmanagement.h"
 
#include "para/swc/port_pool.h"
 

namespace eevp {
namespace control {
 
class LIT
{
public:
    /// @brief Constructor
    LIT();
    
    /// @brief Destructor
    ~LIT();
    
    /// @brief Initialize software component
    bool Initialize();
    
    /// @brief Start software component
    void Start();
    
    /// @brief Terminate software component
    void Terminate();

    //Subscription Management
    void notifySubscriptionInfo(const eevp::subscription::type::SubscriptionInfo& subscriptionInfo);
    void getSubscriptionInfo();

    /// @brief App name
    static const eevp::type::String mAppname;

 
private:
    /// @brief Run software component
    void Run();
 
private:
    /// @brief Signal Handler
    static void SignalHandler(std::int32_t signal);

    /// @brief Logger for software component
    ara::log::Logger& mLogger;
    
    /// @brief Instance of Port {LIT.RPortSoaDms}
    std::shared_ptr<lit::aa::port::RPortSoaDms> m_RPortSoaDms;
    
    /// @brief Instance of Port {LIT.RPortSoaSmartFilm}
    std::shared_ptr<lit::aa::port::RPortSoaSmartFilm> m_RPortSoaSmartFilm;
    
    /// @brief Instance of Port {LIT.RPortSubscriptionmanagement}
    std::shared_ptr<lit::aa::port::RPortSubscriptionmanagement> m_RPortSubscriptionmanagement;

    /// @brief Find RearCurtain Proxy
    bool startSubscriptionManagementProxy();

    /// @brief Flag of Running
    static std::atomic_bool mRunning;

    /// @brief Subscription Flag
    bool mSubscription;

    std::mutex mSubscriptionMutex;
    std::condition_variable mSubscriptionCv;

    std::shared_ptr<eevp::subscription::service::SubscriptionManagementProxyImpl> subscriptionManagementProxyImpl;
};
 
} /// namespace aa
} /// namespace lit
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_LIT_AA_H