///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportsoasmartfilm.h
/// SOFTWARE COMPONENT NAME           : RPortSoaSmartFilm
/// GENERATED DATE                    : 2025-08-22 08:19:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_LIT_AA_RPORTSOASMARTFILM_H
#define PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_LIT_AA_RPORTSOASMARTFILM_H
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "eevp/control/soasmartfilm_proxy.h"
 
#include "ara/log/logger.h"
 
#include <mutex>
#include <thread>
 
namespace lit
{
namespace aa
{
namespace port
{
 
class RPortSoaSmartFilm
{
public:
    /// @brief Constructor
    RPortSoaSmartFilm();
    
    /// @brief Destructor
    ~RPortSoaSmartFilm();
    
    /// @brief Start port
    void Start();
    
    /// @brief Terminate port
    void Terminate();
    
    
    /// @brief Subscribe field notification, soaFilmAuto
    void SubscribesoaFilmAuto();
     
    /// @brief Stop field subscription, soaFilmAuto
    void StopSubscribesoaFilmAuto();
     
    /// @brief Field notification receive handler, soaFilmAuto
    void ReceiveFieldsoaFilmAutoTriggered();
     
    /// @brief Field notification receive handler, soaFilmAuto
    void ReceiveFieldsoaFilmAutoCyclic();
     
    /// @brief Read field notification value, soaFilmAuto
    void ReadValuesoaFilmAuto(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmAuto::FieldType const> samplePtr);
    
    /// @brief Getter method using by software component, soaFilmAuto
    void GetsoaFilmAuto();
    
    /// @brief Subscribe field notification, soaFilmDeviceNormal
    void SubscribesoaFilmDeviceNormal();
     
    /// @brief Stop field subscription, soaFilmDeviceNormal
    void StopSubscribesoaFilmDeviceNormal();
     
    /// @brief Field notification receive handler, soaFilmDeviceNormal
    void ReceiveFieldsoaFilmDeviceNormalTriggered();
     
    /// @brief Field notification receive handler, soaFilmDeviceNormal
    void ReceiveFieldsoaFilmDeviceNormalCyclic();
     
    /// @brief Read field notification value, soaFilmDeviceNormal
    void ReadValuesoaFilmDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmDeviceNormal::FieldType const> samplePtr);
    
    /// @brief Getter method using by software component, soaFilmDeviceNormal
    void GetsoaFilmDeviceNormal();
    
    /// @brief Subscribe field notification, soaFilmOpacities
    void SubscribesoaFilmOpacities();
     
    /// @brief Stop field subscription, soaFilmOpacities
    void StopSubscribesoaFilmOpacities();
     
    /// @brief Field notification receive handler, soaFilmOpacities
    void ReceiveFieldsoaFilmOpacitiesTriggered();
     
    /// @brief Field notification receive handler, soaFilmOpacities
    void ReceiveFieldsoaFilmOpacitiesCyclic();
     
    /// @brief Read field notification value, soaFilmOpacities
    void ReadValuesoaFilmOpacities(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmOpacities::FieldType const> samplePtr);
    
    /// @brief Getter method using by software component, soaFilmOpacities
    void GetsoaFilmOpacities();
    
    /// @brief Subscribe field notification, soaFilmSwVersion
    void SubscribesoaFilmSwVersion();
     
    /// @brief Stop field subscription, soaFilmSwVersion
    void StopSubscribesoaFilmSwVersion();
     
    /// @brief Field notification receive handler, soaFilmSwVersion
    void ReceiveFieldsoaFilmSwVersionTriggered();
     
    /// @brief Field notification receive handler, soaFilmSwVersion
    void ReceiveFieldsoaFilmSwVersionCyclic();
     
    /// @brief Read field notification value, soaFilmSwVersion
    void ReadValuesoaFilmSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmSwVersion::FieldType const> samplePtr);
    
    /// @brief Getter method using by software component, soaFilmSwVersion
    void GetsoaFilmSwVersion();
    
    /// @brief Fire and Forget method using by software component, SetAllOpacities
    void RequestSetAllOpacities(const std::uint8_t& opacity);
    
    /// @brief Fire and Forget method using by software component, SetAuto
    void RequestSetAuto(const bool& on);
    
    /// @brief Fire and Forget method using by software component, SetOpacity
    void RequestSetOpacity(const eevp::control::SoaFilmPos& pos, const std::uint8_t& opacity);
    
private:
    /// @brief Callback for find service
    void Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaSmartFilmProxy::HandleType> handles,
              ara::com::FindServiceHandle findHandle);
    
    
    /// @brief Callback for field notification receiver, soaFilmAuto
    void RegistReceiversoaFilmAuto();
    
    /// @brief Callback for field notification receiver, soaFilmDeviceNormal
    void RegistReceiversoaFilmDeviceNormal();
    
    /// @brief Callback for field notification receiver, soaFilmOpacities
    void RegistReceiversoaFilmOpacities();
    
    /// @brief Callback for field notification receiver, soaFilmSwVersion
    void RegistReceiversoaFilmSwVersion();
    
private:
    /// @brief Logger for this port
    ara::log::Logger& m_logger;
    
    /// @brief Flag of port status
    bool m_running;
    
    /// @brief Flag of find service status
    bool m_found;
    
    /// @brief Mutex for this port
    std::mutex m_mutex; 
    
    /// @brief AUTOSAR Port Interface
    std::shared_ptr<eevp::control::proxy::SoaSmartFilmProxy> m_interface;
    
    /// @brief Find service handle
    std::shared_ptr<ara::com::FindServiceHandle> m_findHandle;
};
 
} /// namespace port
} /// namespace aa
} /// namespace lit
 
#endif /// PARA_AA_GEN_SOFTWARE_COMPONENT_RPORT_LIT_AA_RPORTSOASMARTFILM_H