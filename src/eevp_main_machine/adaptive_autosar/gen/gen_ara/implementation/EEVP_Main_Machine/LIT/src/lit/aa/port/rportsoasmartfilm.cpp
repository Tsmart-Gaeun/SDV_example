///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportsoasmartfilm.cpp
/// SOFTWARE COMPONENT NAME           : RPortSoaSmartFilm
/// GENERATED DATE                    : 2025-08-22 08:19:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "lit/aa/port/rportsoasmartfilm.h"
 
namespace lit
{
namespace aa
{
namespace port
{
 
RPortSoaSmartFilm::RPortSoaSmartFilm()
    : m_logger(ara::log::CreateLogger("LIT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
{
}
 
RPortSoaSmartFilm::~RPortSoaSmartFilm()
{
}
 
void RPortSoaSmartFilm::Start()
{
    m_logger.LogVerbose() << "RPortSoaSmartFilm::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"LIT/AA/RPortSoaSmartFilm"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaSmartFilmProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaSmartFilmProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortSoaSmartFilm::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortSoaSmartFilm::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortSoaSmartFilm::Terminate()
{
    m_logger.LogVerbose() << "RPortSoaSmartFilm::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        StopSubscribesoaFilmAuto();
        StopSubscribesoaFilmDeviceNormal();
        StopSubscribesoaFilmOpacities();
        StopSubscribesoaFilmSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortSoaSmartFilm::Terminate::StopFindService";
    }
}
 
void RPortSoaSmartFilm::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaSmartFilmProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortSoaSmartFilm::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortSoaSmartFilm::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortSoaSmartFilm::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_shared<eevp::control::proxy::SoaSmartFilmProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe field notifications
        SubscribesoaFilmAuto();
        SubscribesoaFilmDeviceNormal();
        SubscribesoaFilmOpacities();
        SubscribesoaFilmSwVersion();
    }
}
 
void RPortSoaSmartFilm::SubscribesoaFilmAuto()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaFilmAuto();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmAuto.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::SubscribesoaFilmAuto::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::SubscribesoaFilmAuto::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::StopSubscribesoaFilmAuto()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmAuto.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaSmartFilm::StopSubscribesoaFilmAuto::Unsubscribed";
    }
}
 
void RPortSoaSmartFilm::RegistReceiversoaFilmAuto()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmAutoTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmAuto.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::RegistReceiversoaFilmAuto::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::RegistReceiversoaFilmAuto::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmAutoTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaFilmAuto.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmAuto.GetNewSamples([&](auto samplePtr) {
                RPortSoaSmartFilm::ReadValuesoaFilmAuto(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmAuto::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmAuto::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmAutoCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaFilmAuto.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmAuto.GetNewSamples([&](auto samplePtr) {
                    RPortSoaSmartFilm::ReadValuesoaFilmAuto(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmAuto::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmAuto::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaSmartFilm::ReadValuesoaFilmAuto(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmAuto::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaSmartFilm::GetsoaFilmAuto()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmAuto.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::GetsoaFilmAuto::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::GetsoaFilmAuto::" << response.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::SubscribesoaFilmDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaFilmDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::SubscribesoaFilmDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::SubscribesoaFilmDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::StopSubscribesoaFilmDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaSmartFilm::StopSubscribesoaFilmDeviceNormal::Unsubscribed";
    }
}
 
void RPortSoaSmartFilm::RegistReceiversoaFilmDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::RegistReceiversoaFilmDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::RegistReceiversoaFilmDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaFilmDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortSoaSmartFilm::ReadValuesoaFilmDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaFilmDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortSoaSmartFilm::ReadValuesoaFilmDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaSmartFilm::ReadValuesoaFilmDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaSmartFilm::GetsoaFilmDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::GetsoaFilmDeviceNormal::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::GetsoaFilmDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::SubscribesoaFilmOpacities()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaFilmOpacities();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmOpacities.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::SubscribesoaFilmOpacities::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::SubscribesoaFilmOpacities::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::StopSubscribesoaFilmOpacities()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmOpacities.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaSmartFilm::StopSubscribesoaFilmOpacities::Unsubscribed";
    }
}
 
void RPortSoaSmartFilm::RegistReceiversoaFilmOpacities()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmOpacitiesTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmOpacities.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::RegistReceiversoaFilmOpacities::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::RegistReceiversoaFilmOpacities::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacitiesTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaFilmOpacities.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmOpacities.GetNewSamples([&](auto samplePtr) {
                RPortSoaSmartFilm::ReadValuesoaFilmOpacities(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacities::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacities::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacitiesCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaFilmOpacities.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmOpacities.GetNewSamples([&](auto samplePtr) {
                    RPortSoaSmartFilm::ReadValuesoaFilmOpacities(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacities::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmOpacities::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaSmartFilm::ReadValuesoaFilmOpacities(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmOpacities::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaSmartFilm::GetsoaFilmOpacities()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmOpacities.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::GetsoaFilmOpacities::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::GetsoaFilmOpacities::" << response.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::SubscribesoaFilmSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaFilmSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaFilmSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::SubscribesoaFilmSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::SubscribesoaFilmSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::StopSubscribesoaFilmSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaFilmSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaSmartFilm::StopSubscribesoaFilmSwVersion::Unsubscribed";
    }
}
 
void RPortSoaSmartFilm::RegistReceiversoaFilmSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaFilmSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaFilmSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::RegistReceiversoaFilmSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::RegistReceiversoaFilmSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaFilmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortSoaSmartFilm::ReadValuesoaFilmSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaFilmSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaFilmSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortSoaSmartFilm::ReadValuesoaFilmSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaSmartFilm::ReceiveFieldsoaFilmSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaSmartFilm::ReadValuesoaFilmSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaFilmSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaSmartFilm::GetsoaFilmSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaFilmSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaSmartFilm::GetsoaFilmSwVersion::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaSmartFilm::GetsoaFilmSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortSoaSmartFilm::RequestSetAllOpacities(const std::uint8_t& opacity)
{
    if (m_found)
    {
        m_interface->SetAllOpacities(opacity);
    }
}
 
void RPortSoaSmartFilm::RequestSetAuto(const bool& on)
{
    if (m_found)
    {
        m_interface->SetAuto(on);
    }
}
 
void RPortSoaSmartFilm::RequestSetOpacity(const eevp::control::SoaFilmPos& pos, const std::uint8_t& opacity)
{
    if (m_found)
    {
        m_interface->SetOpacity(pos, opacity);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace lit
 
/// EOF