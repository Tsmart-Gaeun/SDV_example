///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : rportsoadms.cpp
/// SOFTWARE COMPONENT NAME           : RPortSoaDms
/// GENERATED DATE                    : 2025-08-22 08:19:37
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "lit/aa/port/rportsoadms.h"
 
namespace lit
{
namespace aa
{
namespace port
{
 
RPortSoaDms::RPortSoaDms()
    : m_logger(ara::log::CreateLogger("LIT", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_found{false}
{
}
 
RPortSoaDms::~RPortSoaDms()
{
}
 
void RPortSoaDms::Start()
{
    m_logger.LogVerbose() << "RPortSoaDms::Start";
    
    // regist callback
    ara::core::InstanceSpecifier specifier{"LIT/AA/RPortSoaDms"};
    auto handler = [this](ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDmsProxy::HandleType> handles,
                          ara::com::FindServiceHandle findHandle) {
        this->Find(handles, findHandle);
    };
    
    // find service
    auto find = eevp::control::proxy::SoaDmsProxy::StartFindService(handler, specifier);
    if (find.HasValue())
    {
        m_logger.LogVerbose() << "RPortSoaDms::Start::StartFindService";
    }
    else
    {
        m_logger.LogError() << "RPortSoaDms::Start::StartFindService::" << find.Error().Message();
    }
    
    // run port
    m_running = true;
}
 
void RPortSoaDms::Terminate()
{
    m_logger.LogVerbose() << "RPortSoaDms::Terminate";
    
    // stop port
    m_running = false;
    
    // clear service proxy
    if (m_interface)
    {
        // stop subscribe
        StopSubscribeonDriverNotFocusing();
        StopSubscribeonDriverNotWaken();
        StopSubscribeonDriverNotWatchingFront();
        StopSubscribesoaDmsDeviceNormal();
        StopSubscribesoaDmsDriverStatus();
        StopSubscribesoaDmsStatus();
        StopSubscribesoaDmsSwVersion();
        
        // stop find service
        m_interface->StopFindService(*m_findHandle);
        m_found = false;
        
        m_logger.LogVerbose() << "RPortSoaDms::Terminate::StopFindService";
    }
}
 
void RPortSoaDms::Find(ara::com::ServiceHandleContainer<eevp::control::proxy::SoaDmsProxy::HandleType> handles, ara::com::FindServiceHandle findHandle)
{
    // check finding handles
    if (handles.empty())
    {
        m_logger.LogVerbose() << "RPortSoaDms::Find::Service Instances not found";
        return;
    }
    else
    {
        for (auto& handle : handles)
        {
            m_logger.LogVerbose() << "RPortSoaDms::Find::Searched Instance::ServiceId =" << 
                                     handle.GetServiceHandle().serviceId << 
                                     ", InstanceId =" << 
                                     handle.GetServiceHandle().instanceId;
        }
    }
    
    // create proxy
    if (m_interface)
    {
        m_logger.LogVerbose() << "RPortSoaDms::Find::Proxy is already running";
    }
    else
    {
        m_logger.LogVerbose() << "RPortSoaDms::Find::Using Instance::ServiceId =" << 
                                 handles[0].GetServiceHandle().serviceId << 
                                 ", InstanceId =" << 
                                 handles[0].GetServiceHandle().instanceId;
        m_interface = std::make_shared<eevp::control::proxy::SoaDmsProxy>(handles[0]);
        m_findHandle = std::make_shared<ara::com::FindServiceHandle>(findHandle);
        m_found = true;
        
        // subscribe events
        SubscribeonDriverNotFocusing();
        SubscribeonDriverNotWaken();
        SubscribeonDriverNotWatchingFront();
        // subscribe field notifications
        SubscribesoaDmsDeviceNormal();
        SubscribesoaDmsDriverStatus();
        SubscribesoaDmsStatus();
        SubscribesoaDmsSwVersion();
    }
}
 
void RPortSoaDms::SubscribeonDriverNotFocusing()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiveronDriverNotFocusing();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotFocusing.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribeonDriverNotFocusing::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribeonDriverNotFocusing::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribeonDriverNotFocusing()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotFocusing.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribeonDriverNotFocusing::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiveronDriverNotFocusing()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotFocusingTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotFocusing.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiveronDriverNotFocusing::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiveronDriverNotFocusing::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotFocusingTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->onDriverNotFocusing.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotFocusing.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadDataonDriverNotFocusing(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotFocusingCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->onDriverNotFocusing.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotFocusing.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadDataonDriverNotFocusing(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotFocusing::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadDataonDriverNotFocusing(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotFocusing::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::SubscribeonDriverNotWaken()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiveronDriverNotWaken();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotWaken.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribeonDriverNotWaken::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribeonDriverNotWaken::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribeonDriverNotWaken()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotWaken.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribeonDriverNotWaken::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiveronDriverNotWaken()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotWakenTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotWaken.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiveronDriverNotWaken::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiveronDriverNotWaken::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotWakenTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->onDriverNotWaken.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWaken.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadDataonDriverNotWaken(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotWakenCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->onDriverNotWaken.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWaken.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadDataonDriverNotWaken(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotWaken::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadDataonDriverNotWaken(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWaken::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::SubscribeonDriverNotWatchingFront()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiveronDriverNotWatchingFront();
        
        // request subscribe
        auto subscribe = m_interface->onDriverNotWatchingFront.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribeonDriverNotWatchingFront::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribeonDriverNotWatchingFront::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribeonDriverNotWatchingFront()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->onDriverNotWatchingFront.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribeonDriverNotWatchingFront::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiveronDriverNotWatchingFront()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveEventonDriverNotWatchingFrontTriggered();
        };
        
        // regist callback
        auto callback = m_interface->onDriverNotWatchingFront.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiveronDriverNotWatchingFront::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiveronDriverNotWatchingFront::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotWatchingFrontTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->onDriverNotWatchingFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWatchingFront.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadDataonDriverNotWatchingFront(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveEventonDriverNotWatchingFrontCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->onDriverNotWatchingFront.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->onDriverNotWatchingFront.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadDataonDriverNotWatchingFront(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveEventonDriverNotWatchingFront::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadDataonDriverNotWatchingFront(ara::com::SamplePtr<eevp::control::proxy::events::onDriverNotWatchingFront::SampleType const> samplePtr)
{
    auto data = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::SubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaDmsDeviceNormal();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsDeviceNormal.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribesoaDmsDeviceNormal::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribesoaDmsDeviceNormal::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribesoaDmsDeviceNormal()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsDeviceNormal.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribesoaDmsDeviceNormal::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiversoaDmsDeviceNormal()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsDeviceNormalTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsDeviceNormal.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiversoaDmsDeviceNormal::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsDeviceNormalTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsDeviceNormalCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaDmsDeviceNormal.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDeviceNormal.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadValuesoaDmsDeviceNormal(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsDeviceNormal::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadValuesoaDmsDeviceNormal(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDeviceNormal::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::GetsoaDmsDeviceNormal()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsDeviceNormal.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::GetsoaDmsDeviceNormal::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::GetsoaDmsDeviceNormal::" << response.Error().Message();
        }
    }
}
 
void RPortSoaDms::SubscribesoaDmsDriverStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaDmsDriverStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsDriverStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribesoaDmsDriverStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribesoaDmsDriverStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribesoaDmsDriverStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsDriverStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribesoaDmsDriverStatus::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiversoaDmsDriverStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsDriverStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsDriverStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiversoaDmsDriverStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiversoaDmsDriverStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsDriverStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaDmsDriverStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDriverStatus.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadValuesoaDmsDriverStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsDriverStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaDmsDriverStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsDriverStatus.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadValuesoaDmsDriverStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsDriverStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadValuesoaDmsDriverStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsDriverStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::GetsoaDmsDriverStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsDriverStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::GetsoaDmsDriverStatus::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::GetsoaDmsDriverStatus::" << response.Error().Message();
        }
    }
}
 
void RPortSoaDms::SubscribesoaDmsStatus()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaDmsStatus();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsStatus.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribesoaDmsStatus::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribesoaDmsStatus::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribesoaDmsStatus()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsStatus.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribesoaDmsStatus::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiversoaDmsStatus()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsStatusTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsStatus.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiversoaDmsStatus::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiversoaDmsStatus::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsStatusTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaDmsStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsStatus.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadValuesoaDmsStatus(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsStatusCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaDmsStatus.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsStatus.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadValuesoaDmsStatus(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsStatus::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadValuesoaDmsStatus(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsStatus::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::GetsoaDmsStatus()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsStatus.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::GetsoaDmsStatus::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::GetsoaDmsStatus::" << response.Error().Message();
        }
    }
}
 
void RPortSoaDms::SubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // regist receiver handler
        // if you want to enable it, please uncomment below code
        // 
        // RegistReceiversoaDmsSwVersion();
        
        // request subscribe
        auto subscribe = m_interface->soaDmsSwVersion.Subscribe(1);
        if (subscribe.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::SubscribesoaDmsSwVersion::Subscribed";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::SubscribesoaDmsSwVersion::" << subscribe.Error().Message();
        }
    }
}
 
void RPortSoaDms::StopSubscribesoaDmsSwVersion()
{
    if (m_found)
    {
        // request stop subscribe
        m_interface->soaDmsSwVersion.Unsubscribe();
        m_logger.LogVerbose() << "RPortSoaDms::StopSubscribesoaDmsSwVersion::Unsubscribed";
    }
}
 
void RPortSoaDms::RegistReceiversoaDmsSwVersion()
{
    if (m_found)
    {
        // set callback
        auto receiver = [this]() -> void {
            return ReceiveFieldsoaDmsSwVersionTriggered();
        };
        
        // regist callback
        auto callback = m_interface->soaDmsSwVersion.SetReceiveHandler(receiver);
        if (callback.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::RegistReceiversoaDmsSwVersion::SetReceiveHandler";
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::RegistReceiversoaDmsSwVersion::SetReceiveHandler::" << callback.Error().Message();
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsSwVersionTriggered()
{
    if (m_found)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
        {
            auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                RPortSoaDms::ReadValuesoaDmsSwVersion(std::move(samplePtr));
            }));
            if (recv->HasValue())
            {
                m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
            }
            else
            {
                m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
            }
        }
    }
}
 
void RPortSoaDms::ReceiveFieldsoaDmsSwVersionCyclic()
{
    while (m_running)
    {
        std::lock_guard<std::mutex> lock(m_mutex);
        if (m_found)
        {
            if (m_interface->soaDmsSwVersion.GetSubscriptionState() == ara::com::SubscriptionState::kSubscribed)
            {
                auto recv = std::make_unique<ara::core::Result<size_t>>(m_interface->soaDmsSwVersion.GetNewSamples([&](auto samplePtr) {
                    RPortSoaDms::ReadValuesoaDmsSwVersion(std::move(samplePtr));
                }));
                if (recv->HasValue())
                {
                    m_logger.LogVerbose() << "RPortSoaDms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Value();
                }
                else
                {
                    m_logger.LogError() << "RPortSoaDms::ReceiveFieldsoaDmsSwVersion::GetNewSamples::" << recv->Error().Message();
                }
            }
        }
        std::this_thread::sleep_for(std::chrono::seconds(1));
    }
}
 
void RPortSoaDms::ReadValuesoaDmsSwVersion(ara::com::SamplePtr<eevp::control::proxy::fields::soaDmsSwVersion::FieldType const> samplePtr)
{
    auto value = *samplePtr.Get();
    // put your logic
}
 
void RPortSoaDms::GetsoaDmsSwVersion()
{
    if (m_found)
    {
        auto request = m_interface->soaDmsSwVersion.Get();
        request.wait();
        auto response = request.GetResult();
        if (response.HasValue())
        {
            m_logger.LogVerbose() << "RPortSoaDms::GetsoaDmsSwVersion::Responded";
            
            auto result = response.Value();
            // put your logic
        }
        else
        {
            m_logger.LogError() << "RPortSoaDms::GetsoaDmsSwVersion::" << response.Error().Message();
        }
    }
}
 
void RPortSoaDms::RequestSetDmsPower(const bool& on)
{
    if (m_found)
    {
        m_interface->SetDmsPower(on);
    }
}
 
} /// namespace port
} /// namespace aa
} /// namespace lit
 
/// EOF